---
---

<div id="terminal-wrapper" class="bg-[var(--nord-bg-primary)] text-[var(--nord-text-primary)] p-2 font-mono text-sm h-screen overflow-y-auto flex flex-col">
  <div id="output">
    <div>Welcome to <strong>icepuma.dev</strong></div>
    <div>&nbsp;</div>
    <div style="font-style: italic; color: var(--nord-text-secondary);">Tip: Press TAB to auto-complete commands while typing.</div>
    <div>&nbsp;</div>
    <div id="welcome-commands-list"></div>
  </div>

    <div class="current-input-line flex items-center shrink-0 mt-1 relative">
    <span class="text-[var(--nord-prompt-user)]">guest@<strong>icepuma.dev</strong></span>
    <span class="text-[var(--nord-prompt-symbol)] mx-1">&gt;</span>
    <span id="fake-input-display" class="pl-1 whitespace-pre"></span>
    <span id="ghost-completion" class="opacity-50 text-[var(--nord-text-secondary)]"></span>
    <div id="custom-cursor" class="w-2 h-4 bg-[var(--nord-cursor)] animate-blink inline-block"></div>
    <input
      type="text"
      id="input"
      class="absolute left-0 top-0 w-full h-full opacity-0 cursor-default caret-transparent"
      autofocus
      spellcheck="false"
      autocapitalize="off"
    />
  </div>
</div>

<style>
  @keyframes blink {
    0%, 100% { opacity: 1; }
    50% { opacity: 0; }
  }
  .animate-blink {
    animation: blink 1.5s step-end infinite;
  }
  #input {
    min-width: 1px;
  }

  /* Hide scrollbars completely while maintaining scroll functionality */
  #terminal-wrapper {
    scrollbar-width: none; /* Firefox */
    -ms-overflow-style: none; /* Internet Explorer 10+ */
  }

  /* Hide scrollbars on Webkit browsers (Chrome, Safari, Edge) */
  #terminal-wrapper::-webkit-scrollbar {
    display: none;
  }
</style>

<script>
  import { commands, argumentMap } from '../utils/terminal-commands';
  import { 
    createCompletionState, 
    parseInput, 
    getSuggestions, 
    getGhostText, 
    applySuggestion 
  } from '../utils/terminal-autocomplete';
  import { loadTheme, setupThemeListener, type Theme } from '../utils/theme';
  
  const inputElement = document.getElementById('input') as HTMLInputElement;
  const outputElement = document.getElementById('output') as HTMLDivElement;
  const terminalWrapper = document.getElementById('terminal-wrapper') as HTMLDivElement;
  const fakeInputDisplay = document.getElementById('fake-input-display') as HTMLSpanElement;
  const customCursorElement = document.getElementById('custom-cursor') as HTMLDivElement;
  const ghostCompletionElement = document.getElementById('ghost-completion') as HTMLSpanElement;

  let currentTheme: Theme = loadTheme();
  let completionState = createCompletionState();
  
  setupThemeListener((theme) => {
    currentTheme = theme;
  });

  // Helper functions
  function showGhostCompletion(input: string, suggestion: string) {
    ghostCompletionElement.textContent = getGhostText(input, suggestion);
  }

  function hideGhostCompletion() {
    ghostCompletionElement.textContent = '';
  }

  function resetCompletion() {
    completionState = createCompletionState();
    hideGhostCompletion();
  }

  function updateInputValue(newValue: string) {
    inputElement.value = newValue;
    fakeInputDisplay.textContent = newValue;
  }

  let skipInputHandler = false;

  inputElement.addEventListener('input', () => {
    if (skipInputHandler) {
      skipInputHandler = false;
      return;
    }

    updateInputValue(inputElement.value);
    resetCompletion();

    const parsed = parseInput(inputElement.value);

    if (parsed.isCompletingCommand || parsed.isCompletingArgument) {
      const targetPart = parsed.isCompletingCommand ? parsed.commandPart : parsed.argPart;
      const suggestions = getSuggestions(parsed.commandPart, parsed.argPart, parsed.isCompletingCommand, commands, argumentMap);

      if (suggestions.length > 0) {
        showGhostCompletion(targetPart, suggestions[0]);
      } else {
        hideGhostCompletion();
      }
    } else {
      hideGhostCompletion();
    }
  });

  function handleTabCompletion() {
    const parsed = parseInput(inputElement.value);

    if (!parsed.isCompletingCommand && !parsed.isCompletingArgument) {
      return;
    }

    const suggestions = getSuggestions(parsed.commandPart, parsed.argPart, parsed.isCompletingCommand, commands, argumentMap);

    if (suggestions.length === 0) {
      return;
    }

    // Handle single or first suggestion
    if (ghostCompletionElement.textContent && !completionState.isCompleting) {
      if (suggestions.length === 1) {
        updateInputValue(applySuggestion(suggestions[0], parsed));
        hideGhostCompletion();
        return;
      } else {
        // Multiple suggestions - complete the first one (ghost text)
        updateInputValue(applySuggestion(suggestions[0], parsed));
        hideGhostCompletion();
        // Set up cycling state for next TAB press
        completionState.suggestions = suggestions;
        completionState.currentIndex = 0;
        completionState.isCompleting = true;
        return;
      }
    }

    // Cycle through suggestions
    if (completionState.isCompleting && completionState.suggestions.length > 0) {
      // We're already cycling, move to next suggestion
      completionState.currentIndex = (completionState.currentIndex + 1) % completionState.suggestions.length;
    } else {
      // Start new cycling session
      completionState.suggestions = suggestions;
      completionState.currentIndex = 0;
      completionState.isCompleting = true;
    }
    
    const suggestion = completionState.suggestions[completionState.currentIndex];
    
    // Handle exact command match
    if (parsed.isCompletingCommand && suggestion === parsed.commandPart && commands[suggestion]) {
      skipInputHandler = true;
      updateInputValue(suggestion + ' ');
      const argSuggestions = getSuggestions(suggestion, '', false, commands, argumentMap);
      resetCompletion();
      if (argSuggestions.length > 0) {
        showGhostCompletion('', argSuggestions[0]);
      }
    } else {
      updateInputValue(applySuggestion(suggestion, parsed));
      hideGhostCompletion();
    }
  }

  if (terminalWrapper && inputElement) {
    terminalWrapper.addEventListener('click', (e) => {
      if (e.target instanceof HTMLAnchorElement) {
        return;
      }
      inputElement.focus();
    });
  }

  inputElement.addEventListener('blur', () => {
    if (customCursorElement) customCursorElement.style.opacity = '0';
  });
  inputElement.addEventListener('focus', () => {
    if (customCursorElement) customCursorElement.style.opacity = '1';
  });

  inputElement.addEventListener('keydown', (event) => {
    if (event.key === 'Tab') {
      event.preventDefault();
      handleTabCompletion();
      return;
    }

    if (event.key === 'Enter') {
      let commandToExecute = inputElement.value.trim();

      if (outputElement && commandToExecute) {
        const commandHistoryLine = document.createElement('div');
        commandHistoryLine.classList.add('flex', 'items-center', 'shrink-0', 'mt-1');
        commandHistoryLine.innerHTML =
          `<span class="text-[var(--nord-prompt-user)]">guest@<strong>icepuma.dev</strong></span>` +
          `<span class="text-[var(--nord-prompt-symbol)] mx-1">&gt;</span>` +
          `<span class="command-history-text ml-1 whitespace-pre">${commandToExecute}</span>`;
        outputElement.appendChild(commandHistoryLine);
        const resultContainer = document.createElement('div');
        resultContainer.classList.add('mt-1');
        outputElement.appendChild(resultContainer);
        processCommand(commandToExecute, resultContainer);

        inputElement.value = '';
        if (fakeInputDisplay) fakeInputDisplay.textContent = '';
        resetCompletion();
        skipInputHandler = false;  // Ensure input handler works for next input
        terminalWrapper.scrollTop = terminalWrapper.scrollHeight;
      }
    }
  });

  function processCommand(commandString: string, containerForOutput: HTMLElement) {
    const [name, ...args] = commandString.split(' ');
    const command = commands[name];

    if (command) {
      const result = command.execute(args);
      if (typeof result === 'string') {
        const pre = document.createElement('pre');
        pre.classList.add('my-0');
        pre.textContent = result;
        containerForOutput.appendChild(pre);
      } else {
        containerForOutput.appendChild(result);
      }
    } else if (name) {
      containerForOutput.textContent = `Command not found: ${name}`;
      containerForOutput.classList.add('text-[var(--nord-error)]');
    }
  }

  // Display welcome commands
  function displayWelcomeCommands() {

    const welcomeCommandsDiv = document.getElementById('welcome-commands-list');
    if (!welcomeCommandsDiv) return;
    
    welcomeCommandsDiv.innerHTML = '';

    const introText = document.createElement('div');
    introText.textContent = 'Available commands:';
    introText.style.marginBottom = '0.25rem';
    welcomeCommandsDiv.appendChild(introText);

    const gridContainer = document.createElement('div');
    gridContainer.style.display = 'grid';
    gridContainer.style.gridTemplateColumns = 'max-content 1fr';
    gridContainer.style.gap = '0.25rem 1rem';

    const commandsToShow = Object.values(commands).sort((a, b) => a.name.localeCompare(b.name));
    commandsToShow.forEach(command => {
      const nameElement = document.createElement('strong');
      nameElement.textContent = command.name;
      gridContainer.appendChild(nameElement);

      const descriptionElement = document.createElement('span');
      descriptionElement.textContent = command.description;
      gridContainer.appendChild(descriptionElement);
    });
    
    welcomeCommandsDiv.appendChild(gridContainer);
  }
  
  displayWelcomeCommands();

</script>
